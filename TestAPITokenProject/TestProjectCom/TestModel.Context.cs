//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestProjectCom
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class BlogsEntities : DbContext
    {
        public BlogsEntities()
            : base("name=BlogsEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Blog> Blogs { get; set; }
        public DbSet<Comment> Comments { get; set; }
        public DbSet<Post> Posts { get; set; }
        public DbSet<sysdiagram> sysdiagrams { get; set; }
        public DbSet<UserRole> UserRoles { get; set; }
        public DbSet<User> Users { get; set; }
        public DbSet<BlogContributer> BlogContributers { get; set; }
    
        public virtual int ChangeBlogActivateStatus(Nullable<int> blogId, Nullable<bool> blogIsActive)
        {
            var blogIdParameter = blogId.HasValue ?
                new ObjectParameter("BlogId", blogId) :
                new ObjectParameter("BlogId", typeof(int));
    
            var blogIsActiveParameter = blogIsActive.HasValue ?
                new ObjectParameter("BlogIsActive", blogIsActive) :
                new ObjectParameter("BlogIsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeBlogActivateStatus", blogIdParameter, blogIsActiveParameter);
        }
    
        public virtual int ChangeBlogBlockStatus(Nullable<int> blogId, Nullable<bool> blogIsBlocked)
        {
            var blogIdParameter = blogId.HasValue ?
                new ObjectParameter("BlogId", blogId) :
                new ObjectParameter("BlogId", typeof(int));
    
            var blogIsBlockedParameter = blogIsBlocked.HasValue ?
                new ObjectParameter("BlogIsBlocked", blogIsBlocked) :
                new ObjectParameter("BlogIsBlocked", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeBlogBlockStatus", blogIdParameter, blogIsBlockedParameter);
        }
    
        public virtual int ChangeCommentActivateStatus(Nullable<int> commentID, Nullable<bool> commentIsActive)
        {
            var commentIDParameter = commentID.HasValue ?
                new ObjectParameter("CommentID", commentID) :
                new ObjectParameter("CommentID", typeof(int));
    
            var commentIsActiveParameter = commentIsActive.HasValue ?
                new ObjectParameter("CommentIsActive", commentIsActive) :
                new ObjectParameter("CommentIsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeCommentActivateStatus", commentIDParameter, commentIsActiveParameter);
        }
    
        public virtual int ChangeCommentBlockStatus(Nullable<int> commentID, Nullable<bool> commentIsBlocked)
        {
            var commentIDParameter = commentID.HasValue ?
                new ObjectParameter("CommentID", commentID) :
                new ObjectParameter("CommentID", typeof(int));
    
            var commentIsBlockedParameter = commentIsBlocked.HasValue ?
                new ObjectParameter("CommentIsBlocked", commentIsBlocked) :
                new ObjectParameter("CommentIsBlocked", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeCommentBlockStatus", commentIDParameter, commentIsBlockedParameter);
        }
    
        public virtual int ChangePostActivateStatus(Nullable<int> postID, Nullable<bool> postIsActive)
        {
            var postIDParameter = postID.HasValue ?
                new ObjectParameter("PostID", postID) :
                new ObjectParameter("PostID", typeof(int));
    
            var postIsActiveParameter = postIsActive.HasValue ?
                new ObjectParameter("PostIsActive", postIsActive) :
                new ObjectParameter("PostIsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangePostActivateStatus", postIDParameter, postIsActiveParameter);
        }
    
        public virtual int ChangePostBlockStatus(Nullable<int> postID, Nullable<bool> postIsBlocked)
        {
            var postIDParameter = postID.HasValue ?
                new ObjectParameter("PostID", postID) :
                new ObjectParameter("PostID", typeof(int));
    
            var postIsBlockedParameter = postIsBlocked.HasValue ?
                new ObjectParameter("PostIsBlocked", postIsBlocked) :
                new ObjectParameter("PostIsBlocked", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangePostBlockStatus", postIDParameter, postIsBlockedParameter);
        }
    
        public virtual int ChangeUserStatus(Nullable<int> userID, Nullable<bool> userIsBlocked)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var userIsBlockedParameter = userIsBlocked.HasValue ?
                new ObjectParameter("UserIsBlocked", userIsBlocked) :
                new ObjectParameter("UserIsBlocked", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeUserStatus", userIDParameter, userIsBlockedParameter);
        }
    
        public virtual int DeleteBlogContributersByIds(Nullable<int> blogID, Nullable<int> userID)
        {
            var blogIDParameter = blogID.HasValue ?
                new ObjectParameter("BlogID", blogID) :
                new ObjectParameter("BlogID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteBlogContributersByIds", blogIDParameter, userIDParameter);
        }
    
        public virtual int DeleteBlogsById(Nullable<int> blogID)
        {
            var blogIDParameter = blogID.HasValue ?
                new ObjectParameter("BlogID", blogID) :
                new ObjectParameter("BlogID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteBlogsById", blogIDParameter);
        }
    
        public virtual int DeleteCommentsById(Nullable<int> commentID)
        {
            var commentIDParameter = commentID.HasValue ?
                new ObjectParameter("CommentID", commentID) :
                new ObjectParameter("CommentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCommentsById", commentIDParameter);
        }
    
        public virtual int DeletePostsById(Nullable<int> postID)
        {
            var postIDParameter = postID.HasValue ?
                new ObjectParameter("PostID", postID) :
                new ObjectParameter("PostID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePostsById", postIDParameter);
        }
    
        public virtual int DeleteUserRolesById(Nullable<int> roleID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUserRolesById", roleIDParameter);
        }
    
        public virtual int DeleteUsersById(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUsersById", userIDParameter);
        }
    
        public virtual ObjectResult<GetAllActiveBlogsByUserId_Result> GetAllActiveBlogsByUserId(Nullable<int> userID, Nullable<int> isStudent)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var isStudentParameter = isStudent.HasValue ?
                new ObjectParameter("IsStudent", isStudent) :
                new ObjectParameter("IsStudent", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllActiveBlogsByUserId_Result>("GetAllActiveBlogsByUserId", userIDParameter, isStudentParameter);
        }
    
        public virtual ObjectResult<GetAllActiveByRoleName_Result> GetAllActiveByRoleName(string roleName)
        {
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllActiveByRoleName_Result>("GetAllActiveByRoleName", roleNameParameter);
        }
    
        public virtual ObjectResult<GetAllBlogContributers_Result> GetAllBlogContributers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllBlogContributers_Result>("GetAllBlogContributers");
        }
    
        public virtual ObjectResult<GetAllBlogs_Result> GetAllBlogs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllBlogs_Result>("GetAllBlogs");
        }
    
        public virtual ObjectResult<GetAllComments_Result> GetAllComments()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllComments_Result>("GetAllComments");
        }
    
        public virtual ObjectResult<GetAllPosts_Result> GetAllPosts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllPosts_Result>("GetAllPosts");
        }
    
        public virtual ObjectResult<GetAllUserRoles_Result> GetAllUserRoles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllUserRoles_Result>("GetAllUserRoles");
        }
    
        public virtual ObjectResult<GetAllUsers_Result> GetAllUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllUsers_Result>("GetAllUsers");
        }
    
        public virtual ObjectResult<GetBlogByIdForUser_Result> GetBlogByIdForUser(Nullable<int> blogID, Nullable<int> userID)
        {
            var blogIDParameter = blogID.HasValue ?
                new ObjectParameter("BlogID", blogID) :
                new ObjectParameter("BlogID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBlogByIdForUser_Result>("GetBlogByIdForUser", blogIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<GetBlogContributersByIds_Result> GetBlogContributersByIds(Nullable<int> blogID, Nullable<int> userID)
        {
            var blogIDParameter = blogID.HasValue ?
                new ObjectParameter("BlogID", blogID) :
                new ObjectParameter("BlogID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBlogContributersByIds_Result>("GetBlogContributersByIds", blogIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<GetBlogsById_Result> GetBlogsById(Nullable<int> blogID)
        {
            var blogIDParameter = blogID.HasValue ?
                new ObjectParameter("BlogID", blogID) :
                new ObjectParameter("BlogID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBlogsById_Result>("GetBlogsById", blogIDParameter);
        }
    
        public virtual ObjectResult<GetBlogWithRelatedPosts_Result> GetBlogWithRelatedPosts(Nullable<int> blogID, Nullable<int> pageIndex, Nullable<int> pageSize, ObjectParameter rowsCount)
        {
            var blogIDParameter = blogID.HasValue ?
                new ObjectParameter("BlogID", blogID) :
                new ObjectParameter("BlogID", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBlogWithRelatedPosts_Result>("GetBlogWithRelatedPosts", blogIDParameter, pageIndexParameter, pageSizeParameter, rowsCount);
        }
    
        public virtual ObjectResult<GetCommentsById_Result> GetCommentsById(Nullable<int> commentID)
        {
            var commentIDParameter = commentID.HasValue ?
                new ObjectParameter("CommentID", commentID) :
                new ObjectParameter("CommentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCommentsById_Result>("GetCommentsById", commentIDParameter);
        }
    
        public virtual ObjectResult<GetPostsById_Result> GetPostsById(Nullable<int> postID)
        {
            var postIDParameter = postID.HasValue ?
                new ObjectParameter("PostID", postID) :
                new ObjectParameter("PostID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPostsById_Result>("GetPostsById", postIDParameter);
        }
    
        public virtual ObjectResult<GetPostWithRelatedData_Result> GetPostWithRelatedData(Nullable<int> postID)
        {
            var postIDParameter = postID.HasValue ?
                new ObjectParameter("PostID", postID) :
                new ObjectParameter("PostID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPostWithRelatedData_Result>("GetPostWithRelatedData", postIDParameter);
        }
    
        public virtual ObjectResult<GetUserByEmailAndPassword_Result> GetUserByEmailAndPassword(string userEmail, string userPassword)
        {
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("UserEmail", userEmail) :
                new ObjectParameter("UserEmail", typeof(string));
    
            var userPasswordParameter = userPassword != null ?
                new ObjectParameter("UserPassword", userPassword) :
                new ObjectParameter("UserPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserByEmailAndPassword_Result>("GetUserByEmailAndPassword", userEmailParameter, userPasswordParameter);
        }
    
        public virtual ObjectResult<GetUserRolesById_Result> GetUserRolesById(Nullable<int> roleID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserRolesById_Result>("GetUserRolesById", roleIDParameter);
        }
    
        public virtual ObjectResult<GetUsersById_Result> GetUsersById(Nullable<int> userID, Nullable<bool> includeRoleData)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var includeRoleDataParameter = includeRoleData.HasValue ?
                new ObjectParameter("IncludeRoleData", includeRoleData) :
                new ObjectParameter("IncludeRoleData", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUsersById_Result>("GetUsersById", userIDParameter, includeRoleDataParameter);
        }
    
        public virtual int InsertBlogContributers(Nullable<int> blogID, Nullable<int> userID, Nullable<bool> isActive)
        {
            var blogIDParameter = blogID.HasValue ?
                new ObjectParameter("BlogID", blogID) :
                new ObjectParameter("BlogID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertBlogContributers", blogIDParameter, userIDParameter, isActiveParameter);
        }
    
        public virtual int InsertBlogs(ObjectParameter blogID, string blogTitle, string blogDescription, Nullable<System.DateTime> blogCreateDate, Nullable<bool> blogIsBlocked, Nullable<bool> blogIsActive, string blogHeaderPhoto, Nullable<int> fKUserID, Nullable<bool> isStudent)
        {
            var blogTitleParameter = blogTitle != null ?
                new ObjectParameter("BlogTitle", blogTitle) :
                new ObjectParameter("BlogTitle", typeof(string));
    
            var blogDescriptionParameter = blogDescription != null ?
                new ObjectParameter("BlogDescription", blogDescription) :
                new ObjectParameter("BlogDescription", typeof(string));
    
            var blogCreateDateParameter = blogCreateDate.HasValue ?
                new ObjectParameter("BlogCreateDate", blogCreateDate) :
                new ObjectParameter("BlogCreateDate", typeof(System.DateTime));
    
            var blogIsBlockedParameter = blogIsBlocked.HasValue ?
                new ObjectParameter("BlogIsBlocked", blogIsBlocked) :
                new ObjectParameter("BlogIsBlocked", typeof(bool));
    
            var blogIsActiveParameter = blogIsActive.HasValue ?
                new ObjectParameter("BlogIsActive", blogIsActive) :
                new ObjectParameter("BlogIsActive", typeof(bool));
    
            var blogHeaderPhotoParameter = blogHeaderPhoto != null ?
                new ObjectParameter("BlogHeaderPhoto", blogHeaderPhoto) :
                new ObjectParameter("BlogHeaderPhoto", typeof(string));
    
            var fKUserIDParameter = fKUserID.HasValue ?
                new ObjectParameter("FKUserID", fKUserID) :
                new ObjectParameter("FKUserID", typeof(int));
    
            var isStudentParameter = isStudent.HasValue ?
                new ObjectParameter("IsStudent", isStudent) :
                new ObjectParameter("IsStudent", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertBlogs", blogID, blogTitleParameter, blogDescriptionParameter, blogCreateDateParameter, blogIsBlockedParameter, blogIsActiveParameter, blogHeaderPhotoParameter, fKUserIDParameter, isStudentParameter);
        }
    
        public virtual int InsertComment(ObjectParameter commentID, string commentBody, Nullable<System.DateTime> commentCreateDate, Nullable<bool> commentIsBlocked, Nullable<bool> commentIsActive, Nullable<int> fKPostID, Nullable<int> fKUserID)
        {
            var commentBodyParameter = commentBody != null ?
                new ObjectParameter("CommentBody", commentBody) :
                new ObjectParameter("CommentBody", typeof(string));
    
            var commentCreateDateParameter = commentCreateDate.HasValue ?
                new ObjectParameter("CommentCreateDate", commentCreateDate) :
                new ObjectParameter("CommentCreateDate", typeof(System.DateTime));
    
            var commentIsBlockedParameter = commentIsBlocked.HasValue ?
                new ObjectParameter("CommentIsBlocked", commentIsBlocked) :
                new ObjectParameter("CommentIsBlocked", typeof(bool));
    
            var commentIsActiveParameter = commentIsActive.HasValue ?
                new ObjectParameter("CommentIsActive", commentIsActive) :
                new ObjectParameter("CommentIsActive", typeof(bool));
    
            var fKPostIDParameter = fKPostID.HasValue ?
                new ObjectParameter("FKPostID", fKPostID) :
                new ObjectParameter("FKPostID", typeof(int));
    
            var fKUserIDParameter = fKUserID.HasValue ?
                new ObjectParameter("FKUserID", fKUserID) :
                new ObjectParameter("FKUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertComment", commentID, commentBodyParameter, commentCreateDateParameter, commentIsBlockedParameter, commentIsActiveParameter, fKPostIDParameter, fKUserIDParameter);
        }
    
        public virtual int InsertPosts(ObjectParameter postID, string postTitle, string postBody, Nullable<System.DateTime> postCreateDate, Nullable<bool> postIsBlocked, Nullable<bool> postIsActive, string postKeyWords, Nullable<int> fKBlogID, Nullable<int> fKUserID, Nullable<bool> isCommentable)
        {
            var postTitleParameter = postTitle != null ?
                new ObjectParameter("PostTitle", postTitle) :
                new ObjectParameter("PostTitle", typeof(string));
    
            var postBodyParameter = postBody != null ?
                new ObjectParameter("PostBody", postBody) :
                new ObjectParameter("PostBody", typeof(string));
    
            var postCreateDateParameter = postCreateDate.HasValue ?
                new ObjectParameter("PostCreateDate", postCreateDate) :
                new ObjectParameter("PostCreateDate", typeof(System.DateTime));
    
            var postIsBlockedParameter = postIsBlocked.HasValue ?
                new ObjectParameter("PostIsBlocked", postIsBlocked) :
                new ObjectParameter("PostIsBlocked", typeof(bool));
    
            var postIsActiveParameter = postIsActive.HasValue ?
                new ObjectParameter("PostIsActive", postIsActive) :
                new ObjectParameter("PostIsActive", typeof(bool));
    
            var postKeyWordsParameter = postKeyWords != null ?
                new ObjectParameter("PostKeyWords", postKeyWords) :
                new ObjectParameter("PostKeyWords", typeof(string));
    
            var fKBlogIDParameter = fKBlogID.HasValue ?
                new ObjectParameter("FKBlogID", fKBlogID) :
                new ObjectParameter("FKBlogID", typeof(int));
    
            var fKUserIDParameter = fKUserID.HasValue ?
                new ObjectParameter("FKUserID", fKUserID) :
                new ObjectParameter("FKUserID", typeof(int));
    
            var isCommentableParameter = isCommentable.HasValue ?
                new ObjectParameter("IsCommentable", isCommentable) :
                new ObjectParameter("IsCommentable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPosts", postID, postTitleParameter, postBodyParameter, postCreateDateParameter, postIsBlockedParameter, postIsActiveParameter, postKeyWordsParameter, fKBlogIDParameter, fKUserIDParameter, isCommentableParameter);
        }
    
        public virtual int InsertUser(ObjectParameter userID, string userFirstName, string userLastName, string userNickName, string userEmail, string userPassword, Nullable<bool> userIsBlocked, string userPhoto, Nullable<int> fKRoleID)
        {
            var userFirstNameParameter = userFirstName != null ?
                new ObjectParameter("UserFirstName", userFirstName) :
                new ObjectParameter("UserFirstName", typeof(string));
    
            var userLastNameParameter = userLastName != null ?
                new ObjectParameter("UserLastName", userLastName) :
                new ObjectParameter("UserLastName", typeof(string));
    
            var userNickNameParameter = userNickName != null ?
                new ObjectParameter("UserNickName", userNickName) :
                new ObjectParameter("UserNickName", typeof(string));
    
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("UserEmail", userEmail) :
                new ObjectParameter("UserEmail", typeof(string));
    
            var userPasswordParameter = userPassword != null ?
                new ObjectParameter("UserPassword", userPassword) :
                new ObjectParameter("UserPassword", typeof(string));
    
            var userIsBlockedParameter = userIsBlocked.HasValue ?
                new ObjectParameter("UserIsBlocked", userIsBlocked) :
                new ObjectParameter("UserIsBlocked", typeof(bool));
    
            var userPhotoParameter = userPhoto != null ?
                new ObjectParameter("UserPhoto", userPhoto) :
                new ObjectParameter("UserPhoto", typeof(string));
    
            var fKRoleIDParameter = fKRoleID.HasValue ?
                new ObjectParameter("FKRoleID", fKRoleID) :
                new ObjectParameter("FKRoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUser", userID, userFirstNameParameter, userLastNameParameter, userNickNameParameter, userEmailParameter, userPasswordParameter, userIsBlockedParameter, userPhotoParameter, fKRoleIDParameter);
        }
    
        public virtual int InsertUserRoles(ObjectParameter roleID, string roleName, Nullable<bool> roleIsAdmin, Nullable<bool> roleIsActive)
        {
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var roleIsAdminParameter = roleIsAdmin.HasValue ?
                new ObjectParameter("RoleIsAdmin", roleIsAdmin) :
                new ObjectParameter("RoleIsAdmin", typeof(bool));
    
            var roleIsActiveParameter = roleIsActive.HasValue ?
                new ObjectParameter("RoleIsActive", roleIsActive) :
                new ObjectParameter("RoleIsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUserRoles", roleID, roleNameParameter, roleIsAdminParameter, roleIsActiveParameter);
        }
    
        public virtual int PostPublish(Nullable<int> postID)
        {
            var postIDParameter = postID.HasValue ?
                new ObjectParameter("PostID", postID) :
                new ObjectParameter("PostID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PostPublish", postIDParameter);
        }
    
        public virtual int SearchBlogContributers(Nullable<int> loginUserID, Nullable<int> blogID, Nullable<int> userID, Nullable<bool> isActive, Nullable<int> pageIndex, Nullable<int> pageSize, ObjectParameter rowsCount)
        {
            var loginUserIDParameter = loginUserID.HasValue ?
                new ObjectParameter("LoginUserID", loginUserID) :
                new ObjectParameter("LoginUserID", typeof(int));
    
            var blogIDParameter = blogID.HasValue ?
                new ObjectParameter("BlogID", blogID) :
                new ObjectParameter("BlogID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SearchBlogContributers", loginUserIDParameter, blogIDParameter, userIDParameter, isActiveParameter, pageIndexParameter, pageSizeParameter, rowsCount);
        }
    
        public virtual int SearchBlogs(string blogTitle, string blogDescription, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<bool> block, Nullable<int> userID, Nullable<int> pageIndex, Nullable<int> pageSize, Nullable<int> isStudent, ObjectParameter rowsCount, Nullable<bool> active)
        {
            var blogTitleParameter = blogTitle != null ?
                new ObjectParameter("BlogTitle", blogTitle) :
                new ObjectParameter("BlogTitle", typeof(string));
    
            var blogDescriptionParameter = blogDescription != null ?
                new ObjectParameter("BlogDescription", blogDescription) :
                new ObjectParameter("BlogDescription", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var blockParameter = block.HasValue ?
                new ObjectParameter("Block", block) :
                new ObjectParameter("Block", typeof(bool));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var isStudentParameter = isStudent.HasValue ?
                new ObjectParameter("IsStudent", isStudent) :
                new ObjectParameter("IsStudent", typeof(int));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SearchBlogs", blogTitleParameter, blogDescriptionParameter, dateFromParameter, dateToParameter, blockParameter, userIDParameter, pageIndexParameter, pageSizeParameter, isStudentParameter, rowsCount, activeParameter);
        }
    
        public virtual int SearchComments(string commentBody, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<bool> block, Nullable<int> postID, Nullable<int> userID, Nullable<int> pageIndex, Nullable<int> pageSize, ObjectParameter rowsCount, Nullable<bool> active)
        {
            var commentBodyParameter = commentBody != null ?
                new ObjectParameter("CommentBody", commentBody) :
                new ObjectParameter("CommentBody", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var blockParameter = block.HasValue ?
                new ObjectParameter("Block", block) :
                new ObjectParameter("Block", typeof(bool));
    
            var postIDParameter = postID.HasValue ?
                new ObjectParameter("PostID", postID) :
                new ObjectParameter("PostID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SearchComments", commentBodyParameter, dateFromParameter, dateToParameter, blockParameter, postIDParameter, userIDParameter, pageIndexParameter, pageSizeParameter, rowsCount, activeParameter);
        }
    
        public virtual int SearchPosts(string postTitle, string postBody, string postKeyWords, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<bool> block, Nullable<int> blogID, Nullable<int> userID, Nullable<int> pageIndex, Nullable<int> pageSize, ObjectParameter rowsCount, Nullable<bool> active, Nullable<bool> postIsPublished)
        {
            var postTitleParameter = postTitle != null ?
                new ObjectParameter("PostTitle", postTitle) :
                new ObjectParameter("PostTitle", typeof(string));
    
            var postBodyParameter = postBody != null ?
                new ObjectParameter("PostBody", postBody) :
                new ObjectParameter("PostBody", typeof(string));
    
            var postKeyWordsParameter = postKeyWords != null ?
                new ObjectParameter("PostKeyWords", postKeyWords) :
                new ObjectParameter("PostKeyWords", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var blockParameter = block.HasValue ?
                new ObjectParameter("Block", block) :
                new ObjectParameter("Block", typeof(bool));
    
            var blogIDParameter = blogID.HasValue ?
                new ObjectParameter("BlogID", blogID) :
                new ObjectParameter("BlogID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var postIsPublishedParameter = postIsPublished.HasValue ?
                new ObjectParameter("PostIsPublished", postIsPublished) :
                new ObjectParameter("PostIsPublished", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SearchPosts", postTitleParameter, postBodyParameter, postKeyWordsParameter, dateFromParameter, dateToParameter, blockParameter, blogIDParameter, userIDParameter, pageIndexParameter, pageSizeParameter, rowsCount, activeParameter, postIsPublishedParameter);
        }
    
        public virtual int SearchUsers(string userFirstName, string userLastName, string userNickName, string userEmail, Nullable<bool> userIsBlocked, Nullable<int> fKRoleID, Nullable<int> pageIndex, Nullable<int> pageSize, ObjectParameter rowsCount)
        {
            var userFirstNameParameter = userFirstName != null ?
                new ObjectParameter("UserFirstName", userFirstName) :
                new ObjectParameter("UserFirstName", typeof(string));
    
            var userLastNameParameter = userLastName != null ?
                new ObjectParameter("UserLastName", userLastName) :
                new ObjectParameter("UserLastName", typeof(string));
    
            var userNickNameParameter = userNickName != null ?
                new ObjectParameter("UserNickName", userNickName) :
                new ObjectParameter("UserNickName", typeof(string));
    
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("UserEmail", userEmail) :
                new ObjectParameter("UserEmail", typeof(string));
    
            var userIsBlockedParameter = userIsBlocked.HasValue ?
                new ObjectParameter("UserIsBlocked", userIsBlocked) :
                new ObjectParameter("UserIsBlocked", typeof(bool));
    
            var fKRoleIDParameter = fKRoleID.HasValue ?
                new ObjectParameter("FKRoleID", fKRoleID) :
                new ObjectParameter("FKRoleID", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SearchUsers", userFirstNameParameter, userLastNameParameter, userNickNameParameter, userEmailParameter, userIsBlockedParameter, fKRoleIDParameter, pageIndexParameter, pageSizeParameter, rowsCount);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int UpdateBlogContributers(Nullable<int> blogID, Nullable<int> userID, Nullable<bool> isActive)
        {
            var blogIDParameter = blogID.HasValue ?
                new ObjectParameter("BlogID", blogID) :
                new ObjectParameter("BlogID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateBlogContributers", blogIDParameter, userIDParameter, isActiveParameter);
        }
    
        public virtual int UpdateBlogs(Nullable<int> blogID, string blogTitle, string blogDescription, Nullable<System.DateTime> blogCreateDate, Nullable<bool> blogIsBlocked, Nullable<bool> blogIsActive, string blogHeaderPhoto, Nullable<int> fKUserID)
        {
            var blogIDParameter = blogID.HasValue ?
                new ObjectParameter("BlogID", blogID) :
                new ObjectParameter("BlogID", typeof(int));
    
            var blogTitleParameter = blogTitle != null ?
                new ObjectParameter("BlogTitle", blogTitle) :
                new ObjectParameter("BlogTitle", typeof(string));
    
            var blogDescriptionParameter = blogDescription != null ?
                new ObjectParameter("BlogDescription", blogDescription) :
                new ObjectParameter("BlogDescription", typeof(string));
    
            var blogCreateDateParameter = blogCreateDate.HasValue ?
                new ObjectParameter("BlogCreateDate", blogCreateDate) :
                new ObjectParameter("BlogCreateDate", typeof(System.DateTime));
    
            var blogIsBlockedParameter = blogIsBlocked.HasValue ?
                new ObjectParameter("BlogIsBlocked", blogIsBlocked) :
                new ObjectParameter("BlogIsBlocked", typeof(bool));
    
            var blogIsActiveParameter = blogIsActive.HasValue ?
                new ObjectParameter("BlogIsActive", blogIsActive) :
                new ObjectParameter("BlogIsActive", typeof(bool));
    
            var blogHeaderPhotoParameter = blogHeaderPhoto != null ?
                new ObjectParameter("BlogHeaderPhoto", blogHeaderPhoto) :
                new ObjectParameter("BlogHeaderPhoto", typeof(string));
    
            var fKUserIDParameter = fKUserID.HasValue ?
                new ObjectParameter("FKUserID", fKUserID) :
                new ObjectParameter("FKUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateBlogs", blogIDParameter, blogTitleParameter, blogDescriptionParameter, blogCreateDateParameter, blogIsBlockedParameter, blogIsActiveParameter, blogHeaderPhotoParameter, fKUserIDParameter);
        }
    
        public virtual int UpdateComment(Nullable<int> commentID, string commentBody, Nullable<System.DateTime> commentCreateDate, Nullable<bool> commentIsBlocked, Nullable<bool> commentIsActive, Nullable<int> fKPostID, Nullable<int> fKUserID)
        {
            var commentIDParameter = commentID.HasValue ?
                new ObjectParameter("CommentID", commentID) :
                new ObjectParameter("CommentID", typeof(int));
    
            var commentBodyParameter = commentBody != null ?
                new ObjectParameter("CommentBody", commentBody) :
                new ObjectParameter("CommentBody", typeof(string));
    
            var commentCreateDateParameter = commentCreateDate.HasValue ?
                new ObjectParameter("CommentCreateDate", commentCreateDate) :
                new ObjectParameter("CommentCreateDate", typeof(System.DateTime));
    
            var commentIsBlockedParameter = commentIsBlocked.HasValue ?
                new ObjectParameter("CommentIsBlocked", commentIsBlocked) :
                new ObjectParameter("CommentIsBlocked", typeof(bool));
    
            var commentIsActiveParameter = commentIsActive.HasValue ?
                new ObjectParameter("CommentIsActive", commentIsActive) :
                new ObjectParameter("CommentIsActive", typeof(bool));
    
            var fKPostIDParameter = fKPostID.HasValue ?
                new ObjectParameter("FKPostID", fKPostID) :
                new ObjectParameter("FKPostID", typeof(int));
    
            var fKUserIDParameter = fKUserID.HasValue ?
                new ObjectParameter("FKUserID", fKUserID) :
                new ObjectParameter("FKUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateComment", commentIDParameter, commentBodyParameter, commentCreateDateParameter, commentIsBlockedParameter, commentIsActiveParameter, fKPostIDParameter, fKUserIDParameter);
        }
    
        public virtual int UpdatePosts(Nullable<int> postID, string postTitle, string postBody, Nullable<System.DateTime> postCreateDate, Nullable<bool> postIsBlocked, Nullable<bool> postIsActive, string postKeyWords, Nullable<int> fKBlogID, Nullable<int> fKUserID, Nullable<bool> isCommentable)
        {
            var postIDParameter = postID.HasValue ?
                new ObjectParameter("PostID", postID) :
                new ObjectParameter("PostID", typeof(int));
    
            var postTitleParameter = postTitle != null ?
                new ObjectParameter("PostTitle", postTitle) :
                new ObjectParameter("PostTitle", typeof(string));
    
            var postBodyParameter = postBody != null ?
                new ObjectParameter("PostBody", postBody) :
                new ObjectParameter("PostBody", typeof(string));
    
            var postCreateDateParameter = postCreateDate.HasValue ?
                new ObjectParameter("PostCreateDate", postCreateDate) :
                new ObjectParameter("PostCreateDate", typeof(System.DateTime));
    
            var postIsBlockedParameter = postIsBlocked.HasValue ?
                new ObjectParameter("PostIsBlocked", postIsBlocked) :
                new ObjectParameter("PostIsBlocked", typeof(bool));
    
            var postIsActiveParameter = postIsActive.HasValue ?
                new ObjectParameter("PostIsActive", postIsActive) :
                new ObjectParameter("PostIsActive", typeof(bool));
    
            var postKeyWordsParameter = postKeyWords != null ?
                new ObjectParameter("PostKeyWords", postKeyWords) :
                new ObjectParameter("PostKeyWords", typeof(string));
    
            var fKBlogIDParameter = fKBlogID.HasValue ?
                new ObjectParameter("FKBlogID", fKBlogID) :
                new ObjectParameter("FKBlogID", typeof(int));
    
            var fKUserIDParameter = fKUserID.HasValue ?
                new ObjectParameter("FKUserID", fKUserID) :
                new ObjectParameter("FKUserID", typeof(int));
    
            var isCommentableParameter = isCommentable.HasValue ?
                new ObjectParameter("IsCommentable", isCommentable) :
                new ObjectParameter("IsCommentable", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePosts", postIDParameter, postTitleParameter, postBodyParameter, postCreateDateParameter, postIsBlockedParameter, postIsActiveParameter, postKeyWordsParameter, fKBlogIDParameter, fKUserIDParameter, isCommentableParameter);
        }
    
        public virtual int UpdateUser(Nullable<int> userID, string userFirstName, string userLastName, string userNickName, string userEmail, string userPassword, Nullable<bool> userIsBlocked, string userPhoto, Nullable<int> fKRoleID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var userFirstNameParameter = userFirstName != null ?
                new ObjectParameter("UserFirstName", userFirstName) :
                new ObjectParameter("UserFirstName", typeof(string));
    
            var userLastNameParameter = userLastName != null ?
                new ObjectParameter("UserLastName", userLastName) :
                new ObjectParameter("UserLastName", typeof(string));
    
            var userNickNameParameter = userNickName != null ?
                new ObjectParameter("UserNickName", userNickName) :
                new ObjectParameter("UserNickName", typeof(string));
    
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("UserEmail", userEmail) :
                new ObjectParameter("UserEmail", typeof(string));
    
            var userPasswordParameter = userPassword != null ?
                new ObjectParameter("UserPassword", userPassword) :
                new ObjectParameter("UserPassword", typeof(string));
    
            var userIsBlockedParameter = userIsBlocked.HasValue ?
                new ObjectParameter("UserIsBlocked", userIsBlocked) :
                new ObjectParameter("UserIsBlocked", typeof(bool));
    
            var userPhotoParameter = userPhoto != null ?
                new ObjectParameter("UserPhoto", userPhoto) :
                new ObjectParameter("UserPhoto", typeof(string));
    
            var fKRoleIDParameter = fKRoleID.HasValue ?
                new ObjectParameter("FKRoleID", fKRoleID) :
                new ObjectParameter("FKRoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUser", userIDParameter, userFirstNameParameter, userLastNameParameter, userNickNameParameter, userEmailParameter, userPasswordParameter, userIsBlockedParameter, userPhotoParameter, fKRoleIDParameter);
        }
    
        public virtual int UpdateUserRoles(Nullable<int> roleID, string roleName, Nullable<bool> roleIsAdmin, Nullable<bool> roleIsActive)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var roleIsAdminParameter = roleIsAdmin.HasValue ?
                new ObjectParameter("RoleIsAdmin", roleIsAdmin) :
                new ObjectParameter("RoleIsAdmin", typeof(bool));
    
            var roleIsActiveParameter = roleIsActive.HasValue ?
                new ObjectParameter("RoleIsActive", roleIsActive) :
                new ObjectParameter("RoleIsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUserRoles", roleIDParameter, roleNameParameter, roleIsAdminParameter, roleIsActiveParameter);
        }
    }
}
